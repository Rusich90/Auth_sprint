"""Initial migration

Revision ID: 233a887b105b
Revises:
Create Date: 2022-03-14 16:49:46.792866

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "233a887b105b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("login"),
    )
    op.create_table(
        "sessions",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("auth_date", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id", "auth_date"),
        sa.UniqueConstraint("id", "auth_date"),
        postgresql_partition_by="RANGE (auth_date)",
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS sessions_y2022m03
        PARTITION OF sessions
        FOR VALUES FROM ('2022-03-01') TO ('2022-03-31');
        """
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS sessions_y2022m04
        PARTITION OF sessions
        FOR VALUES FROM ('2022-04-01') TO ('2022-04-30');
        """
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS sessions_y2022m05
        PARTITION OF sessions
        FOR VALUES FROM ('2022-05-01') TO ('2022-05-31');
        """
    )
    op.create_table(
        "users_roles",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_roles")
    op.drop_table("sessions")
    op.drop_table("users")
    op.drop_table("roles")
    # ### end Alembic commands ###
